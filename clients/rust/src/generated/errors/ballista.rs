//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use num_derive::FromPrimitive;
use thiserror::Error;

#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum BallistaError {
    /// 6000 - Invalid instruction
    #[error("Invalid instruction")]
    InvalidInstructionData = 0x1770,
    /// 6001 - Invalid schema data
    #[error("Invalid schema data")]
    InvalidSchemaData = 0x1771,
    /// 6002 - Failed to get account from all accounts
    #[error("Failed to get account from all accounts")]
    EvaluationError = 0x1772,
    /// 6003 - Static value not found
    #[error("Static value not found")]
    StaticValueNotFound = 0x1773,
    /// 6004 - Cached value not found
    #[error("Cached value not found")]
    CachedValueNotFound = 0x1774,
    /// 6005 - Input value not found
    #[error("Input value not found")]
    InputValueNotFound = 0x1775,
    /// 6006 - Invalid cast
    #[error("Invalid cast")]
    InvalidCast = 0x1776,
    /// 6007 - Arithmetic overflow
    #[error("Arithmetic overflow")]
    ArithmeticOverflow = 0x1777,
    /// 6008 - Invalid token account
    #[error("Invalid token account")]
    InvalidTokenAccount = 0x1778,
    /// 6009 - Account not found
    #[error("Account not found")]
    AccountNotFound = 0x1779,
    /// 6010 - Task not found
    #[error("Task not found")]
    TaskNotFound = 0x177A,
    /// 6011 - Instruction schema not found
    #[error("Instruction schema not found")]
    InstructionSchemaNotFound = 0x177B,
    /// 6012 - Account empty
    #[error("Account empty")]
    AccountEmpty = 0x177C,
    /// 6013 - Invalid account range
    #[error("Invalid account range")]
    InvalidAccountRange = 0x177D,
    /// 6014 - Range out of bounds
    #[error("Range out of bounds")]
    RangeOutOfBounds = 0x177E,
    /// 6015 - TODO
    #[error("TODO")]
    Todo = 0x177F,
    /// 6016 - Invalid PDA
    #[error("Invalid PDA")]
    InvalidPDA = 0x1780,
}

impl solana_program::program_error::PrintProgramError for BallistaError {
    fn print<E>(&self) {
        solana_program::msg!(&self.to_string());
    }
}
