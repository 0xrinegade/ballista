/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type TransactionSigner,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { BALLISTA_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getValueDecoder,
  getValueEncoder,
  type Value,
  type ValueArgs,
} from '../types';

export const EXECUTE_TASK_DISCRIMINATOR = 1;

export function getExecuteTaskDiscriminatorBytes() {
  return getU8Encoder().encode(EXECUTE_TASK_DISCRIMINATOR);
}

export type ExecuteTaskInstruction<
  TProgram extends string = typeof BALLISTA_PROGRAM_ADDRESS,
  TAccountTask extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountTask extends string
        ? ReadonlyAccount<TAccountTask>
        : TAccountTask,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      ...TRemainingAccounts,
    ]
  >;

export type ExecuteTaskInstructionData = {
  discriminator: number;
  taskValues: Array<Value>;
};

export type ExecuteTaskInstructionDataArgs = { taskValues: Array<ValueArgs> };

export function getExecuteTaskInstructionDataEncoder(): Encoder<ExecuteTaskInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['taskValues', getArrayEncoder(getValueEncoder())],
    ]),
    (value) => ({ ...value, discriminator: EXECUTE_TASK_DISCRIMINATOR })
  );
}

export function getExecuteTaskInstructionDataDecoder(): Decoder<ExecuteTaskInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['taskValues', getArrayDecoder(getValueDecoder())],
  ]);
}

export function getExecuteTaskInstructionDataCodec(): Codec<
  ExecuteTaskInstructionDataArgs,
  ExecuteTaskInstructionData
> {
  return combineCodec(
    getExecuteTaskInstructionDataEncoder(),
    getExecuteTaskInstructionDataDecoder()
  );
}

export type ExecuteTaskInput<
  TAccountTask extends string = string,
  TAccountPayer extends string = string,
> = {
  /** Task Account */
  task: Address<TAccountTask>;
  /** Payer account */
  payer: TransactionSigner<TAccountPayer>;
  taskValues: ExecuteTaskInstructionDataArgs['taskValues'];
};

export function getExecuteTaskInstruction<
  TAccountTask extends string,
  TAccountPayer extends string,
  TProgramAddress extends Address = typeof BALLISTA_PROGRAM_ADDRESS,
>(
  input: ExecuteTaskInput<TAccountTask, TAccountPayer>,
  config?: { programAddress?: TProgramAddress }
): ExecuteTaskInstruction<TProgramAddress, TAccountTask, TAccountPayer> {
  // Program address.
  const programAddress = config?.programAddress ?? BALLISTA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    task: { value: input.task ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [getAccountMeta(accounts.task), getAccountMeta(accounts.payer)],
    programAddress,
    data: getExecuteTaskInstructionDataEncoder().encode(
      args as ExecuteTaskInstructionDataArgs
    ),
  } as ExecuteTaskInstruction<TProgramAddress, TAccountTask, TAccountPayer>;

  return instruction;
}

export type ParsedExecuteTaskInstruction<
  TProgram extends string = typeof BALLISTA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Task Account */
    task: TAccountMetas[0];
    /** Payer account */
    payer: TAccountMetas[1];
  };
  data: ExecuteTaskInstructionData;
};

export function parseExecuteTaskInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedExecuteTaskInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      task: getNextAccount(),
      payer: getNextAccount(),
    },
    data: getExecuteTaskInstructionDataDecoder().decode(instruction.data),
  };
}
