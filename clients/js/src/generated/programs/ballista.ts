/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  getU8Encoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/web3.js';
import {
  type ParsedCreateTaskInstruction,
  type ParsedExecuteTaskInstruction,
  type ParsedExecuteTaskNoInputsInstruction,
} from '../instructions';

export const BALLISTA_PROGRAM_ADDRESS =
  'BLSTAxxzuLZzFQpwDGMMXERLCGw36u3Au3XeZNyRHpe2' as Address<'BLSTAxxzuLZzFQpwDGMMXERLCGw36u3Au3XeZNyRHpe2'>;

export enum BallistaAccount {
  TaskDefinition,
}

export enum BallistaInstruction {
  CreateTask,
  ExecuteTask,
  ExecuteTaskNoInputs,
}

export function identifyBallistaInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): BallistaInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return BallistaInstruction.CreateTask;
  }
  if (containsBytes(data, getU8Encoder().encode(1), 0)) {
    return BallistaInstruction.ExecuteTask;
  }
  if (containsBytes(data, getU8Encoder().encode(2), 0)) {
    return BallistaInstruction.ExecuteTaskNoInputs;
  }
  throw new Error(
    'The provided instruction could not be identified as a ballista instruction.'
  );
}

export type ParsedBallistaInstruction<
  TProgram extends string = 'BLSTAxxzuLZzFQpwDGMMXERLCGw36u3Au3XeZNyRHpe2',
> =
  | ({
      instructionType: BallistaInstruction.CreateTask;
    } & ParsedCreateTaskInstruction<TProgram>)
  | ({
      instructionType: BallistaInstruction.ExecuteTask;
    } & ParsedExecuteTaskInstruction<TProgram>)
  | ({
      instructionType: BallistaInstruction.ExecuteTaskNoInputs;
    } & ParsedExecuteTaskNoInputsInstruction<TProgram>);
