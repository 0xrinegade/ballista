/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/web3.js';
import { BALLISTA_PROGRAM_ADDRESS } from '../programs';

/** InvalidInstructionData: Invalid instruction */
export const BALLISTA_ERROR__INVALID_INSTRUCTION_DATA = 0x1770; // 6000
/** InvalidSchemaData: Invalid schema data */
export const BALLISTA_ERROR__INVALID_SCHEMA_DATA = 0x1771; // 6001
/** EvaluationError: Failed to get account from all accounts */
export const BALLISTA_ERROR__EVALUATION_ERROR = 0x1772; // 6002
/** StaticValueNotFound: Static value not found */
export const BALLISTA_ERROR__STATIC_VALUE_NOT_FOUND = 0x1773; // 6003
/** CachedValueNotFound: Cached value not found */
export const BALLISTA_ERROR__CACHED_VALUE_NOT_FOUND = 0x1774; // 6004
/** InputValueNotFound: Input value not found */
export const BALLISTA_ERROR__INPUT_VALUE_NOT_FOUND = 0x1775; // 6005
/** InvalidCast: Invalid cast */
export const BALLISTA_ERROR__INVALID_CAST = 0x1776; // 6006
/** ArithmeticOverflow: Arithmetic overflow */
export const BALLISTA_ERROR__ARITHMETIC_OVERFLOW = 0x1777; // 6007
/** InvalidTokenAccount: Invalid token account */
export const BALLISTA_ERROR__INVALID_TOKEN_ACCOUNT = 0x1778; // 6008
/** AccountNotFound: Account not found */
export const BALLISTA_ERROR__ACCOUNT_NOT_FOUND = 0x1779; // 6009
/** TaskNotFound: Task not found */
export const BALLISTA_ERROR__TASK_NOT_FOUND = 0x177a; // 6010
/** InstructionSchemaNotFound: Instruction schema not found */
export const BALLISTA_ERROR__INSTRUCTION_SCHEMA_NOT_FOUND = 0x177b; // 6011
/** AccountEmpty: Account empty */
export const BALLISTA_ERROR__ACCOUNT_EMPTY = 0x177c; // 6012
/** InvalidAccountRange: Invalid account range */
export const BALLISTA_ERROR__INVALID_ACCOUNT_RANGE = 0x177d; // 6013
/** RangeOutOfBounds: Range out of bounds */
export const BALLISTA_ERROR__RANGE_OUT_OF_BOUNDS = 0x177e; // 6014

export type BallistaError =
  | typeof BALLISTA_ERROR__ACCOUNT_EMPTY
  | typeof BALLISTA_ERROR__ACCOUNT_NOT_FOUND
  | typeof BALLISTA_ERROR__ARITHMETIC_OVERFLOW
  | typeof BALLISTA_ERROR__CACHED_VALUE_NOT_FOUND
  | typeof BALLISTA_ERROR__EVALUATION_ERROR
  | typeof BALLISTA_ERROR__INPUT_VALUE_NOT_FOUND
  | typeof BALLISTA_ERROR__INSTRUCTION_SCHEMA_NOT_FOUND
  | typeof BALLISTA_ERROR__INVALID_ACCOUNT_RANGE
  | typeof BALLISTA_ERROR__INVALID_CAST
  | typeof BALLISTA_ERROR__INVALID_INSTRUCTION_DATA
  | typeof BALLISTA_ERROR__INVALID_SCHEMA_DATA
  | typeof BALLISTA_ERROR__INVALID_TOKEN_ACCOUNT
  | typeof BALLISTA_ERROR__RANGE_OUT_OF_BOUNDS
  | typeof BALLISTA_ERROR__STATIC_VALUE_NOT_FOUND
  | typeof BALLISTA_ERROR__TASK_NOT_FOUND;

let ballistaErrorMessages: Record<BallistaError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  ballistaErrorMessages = {
    [BALLISTA_ERROR__ACCOUNT_EMPTY]: `Account empty`,
    [BALLISTA_ERROR__ACCOUNT_NOT_FOUND]: `Account not found`,
    [BALLISTA_ERROR__ARITHMETIC_OVERFLOW]: `Arithmetic overflow`,
    [BALLISTA_ERROR__CACHED_VALUE_NOT_FOUND]: `Cached value not found`,
    [BALLISTA_ERROR__EVALUATION_ERROR]: `Failed to get account from all accounts`,
    [BALLISTA_ERROR__INPUT_VALUE_NOT_FOUND]: `Input value not found`,
    [BALLISTA_ERROR__INSTRUCTION_SCHEMA_NOT_FOUND]: `Instruction schema not found`,
    [BALLISTA_ERROR__INVALID_ACCOUNT_RANGE]: `Invalid account range`,
    [BALLISTA_ERROR__INVALID_CAST]: `Invalid cast`,
    [BALLISTA_ERROR__INVALID_INSTRUCTION_DATA]: `Invalid instruction`,
    [BALLISTA_ERROR__INVALID_SCHEMA_DATA]: `Invalid schema data`,
    [BALLISTA_ERROR__INVALID_TOKEN_ACCOUNT]: `Invalid token account`,
    [BALLISTA_ERROR__RANGE_OUT_OF_BOUNDS]: `Range out of bounds`,
    [BALLISTA_ERROR__STATIC_VALUE_NOT_FOUND]: `Static value not found`,
    [BALLISTA_ERROR__TASK_NOT_FOUND]: `Task not found`,
  };
}

export function getBallistaErrorMessage(code: BallistaError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (ballistaErrorMessages as Record<BallistaError, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isBallistaError<TProgramErrorCode extends BallistaError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    BALLISTA_PROGRAM_ADDRESS,
    code
  );
}
