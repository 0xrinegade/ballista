/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getStructDecoder,
  getStructEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
} from '@solana/web3.js';

export type TaskDefinition = {};

export type TaskDefinitionArgs = TaskDefinition;

export function getTaskDefinitionEncoder(): Encoder<TaskDefinitionArgs> {
  return getStructEncoder([]);
}

export function getTaskDefinitionDecoder(): Decoder<TaskDefinition> {
  return getStructDecoder([]);
}

export function getTaskDefinitionCodec(): Codec<
  TaskDefinitionArgs,
  TaskDefinition
> {
  return combineCodec(getTaskDefinitionEncoder(), getTaskDefinitionDecoder());
}

export function decodeTaskDefinition<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<TaskDefinition, TAddress>;
export function decodeTaskDefinition<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<TaskDefinition, TAddress>;
export function decodeTaskDefinition<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<TaskDefinition, TAddress> | MaybeAccount<TaskDefinition, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getTaskDefinitionDecoder()
  );
}

export async function fetchTaskDefinition<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<TaskDefinition, TAddress>> {
  const maybeAccount = await fetchMaybeTaskDefinition(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeTaskDefinition<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<TaskDefinition, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeTaskDefinition(maybeAccount);
}

export async function fetchAllTaskDefinition(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<TaskDefinition>[]> {
  const maybeAccounts = await fetchAllMaybeTaskDefinition(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeTaskDefinition(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<TaskDefinition>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeTaskDefinition(maybeAccount)
  );
}

export function getTaskDefinitionSize(): number {
  return 0;
}
